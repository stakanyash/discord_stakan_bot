import discord
from discord.ext import commands, tasks
from discord.ui import Button, View
import asyncio
from datetime import datetime, timedelta
import random
import googleapiclient.discovery
import googleapiclient.errors
import json
import os
import logging
import sqlite3
from randomlist import mr_carsen_messages, gold_fund_messages

log_timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
log_filename = f"bot_{log_timestamp}.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler()
    ]
)

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)

bomb_info = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
with open('config.json', 'r') as file:
    config = json.load(file)

DISCORD_TOKEN = config['DISCORD_TOKEN']
MUTE_ROLE_ID = config['MUTE_ROLE_ID']
YOUR_ADMIN_ROLE_ID = config['YOUR_ADMIN_ROLE_ID']
NOTIFICATION_CHANNEL_ID = config['NOTIFICATION_CHANNEL_ID']
YOUTUBE_API_KEYS = config['YOUTUBE_API_KEYS']
YOUTUBE_CHANNEL_ID_1 = config['YOUTUBE_CHANNEL_ID_1']
YOUTUBE_CHANNEL_ID_2 = config['YOUTUBE_CHANNEL_ID_2']

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_tables():
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS warnings (
                  user_id INTEGER,
                  timestamp TEXT,
                  reason TEXT
               )''')
    c.execute('''CREATE TABLE IF NOT EXISTS mutes (
                  user_id INTEGER,
                  end_time TEXT,
                  reason TEXT
               )''')
    c.execute('''CREATE TABLE IF NOT EXISTS bomb_cooldowns (
                  guild_id INTEGER PRIMARY KEY,
                  end_time TEXT
               )''')
    c.execute('''CREATE TABLE IF NOT EXISTS last_video_ids (
                  channel_id TEXT PRIMARY KEY,
                  video_id TEXT
               )''')
    conn.commit()
    conn.close()

create_tables()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_warnings(user_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT timestamp, reason FROM warnings WHERE user_id = ?", (user_id,))
    warnings = c.fetchall()
    conn.close()
    return [{'timestamp': warning[0], 'reason': warning[1]} for warning in warnings]

def add_warning(user_id, reason):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("INSERT INTO warnings (user_id, timestamp, reason) VALUES (?, ?, ?)",
              (user_id, datetime.now().isoformat(), reason))
    conn.commit()
    conn.close()

def remove_warnings(user_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("DELETE FROM warnings WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_mutes():
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT user_id, end_time, reason FROM mutes")
    mutes = c.fetchall()
    conn.close()
    return {mute[0]: {'end_time': mute[1], 'reason': mute[2]} for mute in mutes}

def add_mute(user_id, end_time, reason):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("INSERT INTO mutes (user_id, end_time, reason) VALUES (?, ?, ?)",
              (user_id, end_time.isoformat(), reason))
    conn.commit()
    conn.close()

def remove_mute(user_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("DELETE FROM mutes WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_bomb_cooldown(guild_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT end_time FROM bomb_cooldowns WHERE guild_id = ?", (guild_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def set_bomb_cooldown(guild_id, end_time):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO bomb_cooldowns (guild_id, end_time) VALUES (?, ?)", (guild_id, end_time.isoformat()))
    conn.commit()
    conn.close()

def remove_bomb_cooldown(guild_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("DELETE FROM bomb_cooldowns WHERE guild_id = ?", (guild_id,))
    conn.commit()
    conn.close()

def get_last_video_id(channel_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("SELECT video_id FROM last_video_ids WHERE channel_id = ?", (channel_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def set_last_video_id(channel_id, video_id):
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO last_video_ids (channel_id, video_id) VALUES (?, ?)", (channel_id, video_id))
    conn.commit()
    conn.close()

@bot.event
async def on_ready():
    logging.info(f'Logged in as {bot.user}')
    check_mutes.start()

@bot.command()
@commands.has_permissions(manage_messages=True)
async def mute(ctx, member: discord.Member, duration: str, *, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"):
    role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
    if not role:
        await ctx.send("–†–æ–ª—å –º—å—é—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ–ª—å, —á—Ç–æ ID —Ä–æ–ª–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        logging.warning(f"Mute role not found for guild {ctx.guild.id}")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    duration_seconds = parse_duration(duration)
    if duration_seconds is None:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1d, 2h, 30m, 60s.")
        logging.warning(f"Invalid duration format: {duration}")
        return

    await member.add_roles(role, reason=reason)
    await ctx.send(f'{member.mention} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {duration}. –ü—Ä–∏—á–∏–Ω–∞: {reason}')
    logging.info(f"Muted {member.id} for {duration}. Reason: {reason}")

    add_mute(member.id, datetime.now() + timedelta(seconds=duration_seconds), reason)

@bot.command()
@commands.has_permissions(manage_messages=True)
async def unmute(ctx, member: discord.Member):
    role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
    if role in member.roles:
        await member.remove_roles(role, reason="–†—É—á–Ω–æ–π –∞–Ω–º—å—é—Ç")
        await ctx.send(f'{member.mention} –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω.')
        logging.info(f"Unmuted {member.id}")
        remove_mute(member.id)
    else:
        await ctx.send(f'{member.mention} –Ω–µ –∑–∞–º—å—é—á–µ–Ω.')
        logging.warning(f"{member.id} is not muted")

@bot.command()
async def MrCarsen(ctx):
    message = random.choice(mr_carsen_messages)
    await ctx.reply(message)
    logging.info(f"Sent MrCarsen message to {ctx.author.id}")

@bot.command()
async def –∑–æ–ª–æ—Ç–æ–π—Ñ–æ–Ω–¥(ctx):
    message = random.choice(gold_fund_messages)
    await ctx.reply(message)
    logging.info(f"Sent gold fund message to {ctx.author.id}")

@bot.command()
async def –Ω–µ—É–º–Ω–∏—á–∞–π(ctx):
    await ctx.reply('–î–∞ –ø–æ—à—ë–ª —Ç—ã –Ω–∞—Ö—É–π!')
    logging.info(f"Sent '–Ω–µ—É–º–Ω–∏—á–∞–π' message to {ctx.author.id}")

@bot.command()
async def –∞–º–æ–∂–µ—Ç–±—ã—Ç—å—Ç—ã(ctx):
    await ctx.reply('–ö–¢–û?! –Ø?!')
    logging.info(f"Sent '–∞–º–æ–∂–µ—Ç–±—ã—Ç—å—Ç—ã' message to {ctx.author.id}")

@bot.command()
@commands.has_permissions(manage_messages=True)
async def –∞—Ö—É–π—Ç–µ–±–µ(ctx):
    await ctx.reply('–°—É–∫–ø—ã–∑–¥—ã—Ü((9(((')
    logging.info(f"Sent '–∞—Ö—É–π—Ç–µ–±–µ' message to {ctx.author.id}")

@bot.command()
async def –ø–æ—à—ë–ª—Ç—ã–Ω–∞—Ö—É–π(ctx):
    await ctx.reply('–¢–∞ –∑–∞ —â–æ, –ø–ª—è—Ç—å?..')
    logging.info(f"Sent '–ø–æ—à—ë–ª—Ç—ã–Ω–∞—Ö—É–π' message to {ctx.author.id}")

@bot.command()
async def —Ä—É–ª–µ—Ç–∫–∞(ctx):
    died = random.randint(0, 1)
    if died == 1:
        await ctx.reply("–ë–ê–ë–ê–•! You are dead. Not a big surprise. ‚ò†Ô∏è")
        role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
        if role:
            await ctx.author.add_roles(role, reason="–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞")
            await asyncio.sleep(60)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã
            await ctx.author.remove_roles(role, reason="–í—Ä–µ–º—è –º—å—é—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")
        logging.info(f"{ctx.author.id} lost the roulette and was muted for 1 minute")
    else:
        await ctx.reply("**¬∑—â—ë–ª–∫¬∑**\n–§–∞—Ä—Ç–æ–≤—ã–π –æ–¥–Ω–∞–∫–æ! ü§î")
        logging.info(f"{ctx.author.id} won the roulette")

@bot.command()
async def –ø–æ–º–æ—â—å(ctx):
    help_message = (
        "**–ó–¥–∞—Ä–æ–≤–∞, —Å–∞–ª–∞–≥–∏!**\n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –º–Ω–æ–≥–æ —á–µ–≥–æ. –ü—Ä–∏—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≤–∏–¥–µ–æ, –∑–∞–º—É—Ç–∏—Ç—å –≤–∞—Å –∏–ª–∏ –∂–µ –ø–æ–∑–∞–±–∞–≤–∏—Ç—å —Å–≤–æ–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏!\n"
        "\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "\n"
        "- `!MrCarsen` - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ '–¶—ã—Ç–∞—Ç—ã –≤–∏–ª–∏–∫–∏—Ö' –∏–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∏—â–∞.\n"
        "\n"
        "- `!–∑–æ–ª–æ—Ç–æ–π—Ñ–æ–Ω–¥` - –≤—ã–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∑–æ–ª–æ—Ç–æ–≥–æ —Ñ–æ–Ω–¥–∞.\n"
        "\n"
        "- `!–Ω–µ—É–º–Ω–∏—á–∞–π` - –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ —É–º–Ω–∏—á–∞–µ—Ç. –í –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ—ë –±–æ—Ç –ø–æ—à–ª—ë—Ç –≤–∞—Å –Ω–∞ —Ç—Ä–∏ –±—É–∫–≤—ã.\n"
        "–û–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –µ–º—É –∫–æ–º–∞–Ω–¥–æ–π `!–∞–º–æ–∂–µ—Ç–±—ã—Ç—å—Ç—ã`, –ø–æ–ª—É—á–∏–≤ –≤ –æ—Ç–≤–µ—Ç '–ö–¢–û?! –Ø?!'.\n"
        "–ù–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É `!–•–£–Ø–ë–õ–Ø` –±–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ì–ª–∞–¥–∞ –í–∞–ª–∞–∫–∞—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—Å –≤ –±–∞–Ω. –ù–∞ —Ü–µ–ª—É—é –º–∏–Ω—É—Ç—É.\n"
        "\n"
        "- `!–ø–æ—à—ë–ª—Ç—ã–Ω–∞—Ö—É–π` - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–ª–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∫—É–¥–∞ –ø–æ–¥–∞–ª—å—à–µ, –Ω–æ –±–æ—Ç –≤–æ—Å–ø—Ä–∏–º–µ—Ç —ç—Ç–æ –Ω–∞ —Å–≤–æ–π —Å—á—ë—Ç, —É—á—Ç–∏—Ç–µ.\n"
        "||–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –∏ –æ–Ω –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç –∑–∞ —á—Ç–æ –≤—ã —Ç–∞–∫ —Å –Ω–∏–º||\n"
        "\n"
        "- `!—Ä—É–ª–µ—Ç–∫–∞` - —Å–≤–æ–µ–æ–±—Ä–∞–∑–Ω–∞—è '–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞'. –õ–∏–±–æ –∂–∏–≤, –ª–∏–±–æ —É–º–µ—Ä. –í —Å–ª—É—á–∞–µ '—Å–º–µ—Ä—Ç–∏' –ø–æ–ª—É—á–∞–µ—Ç–µ –º—å—é—Ç –Ω–∞ –º–∏–Ω—É—Ç—É.\n"
        "\n"
        "- `!bomb` - —Å–≤–æ–µ–æ–±—Ä–∞–∑–Ω–∞—è –±–æ–º–±–∞. –£—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ –¥–∞—ë—Ç—Å—è 1 —á–∞—Å –Ω–∞ –µ—ë —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —É—Å–ø–µ–µ—Ç - –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—é—Ç –º—å—é—Ç –Ω–∞ 1 —á–∞—Å.\n"
        "–ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 1 —Ä–∞–∑ –≤ 7 –¥–Ω–µ–π.\n"
        "\n"
        "- `!defuse` - —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π '–±–æ–º–±—ã'. –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –≤ –≤–∏–¥–µ 4-—ë—Ö —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–æ–¥–∞.\n"
        "–ü—Ä–∏–º–µ—Ä: `!defuse 1432`\n"
        "\n"
        "–í –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ —á–∞—Å—Ç–∏ –∫–æ–º–∞–Ω–¥, —Ç–∞–∫ —á—Ç–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )
    await ctx.send(help_message)
    logging.info(f"Sent help message to {ctx.author.id}")

@bot.command()
async def –•–£–Ø–ë–õ–Ø(ctx):
    await ctx.reply("–ë–ê–ù!")
    role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
    if role:
        await ctx.author.add_roles(role, reason="–î–æ–ø–∏–∑–¥–µ–ª—Å—è, –¥—è–¥—è!")
        await asyncio.sleep(60)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã
        await ctx.author.remove_roles(role, reason="–í—Ä–µ–º—è –º—å—é—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")
    logging.info(f"{ctx.author.id} triggered the –•–£–Ø–ë–õ–Ø command and was muted for 1 minute")

@bot.command()
@commands.has_permissions(manage_messages=True)
async def mute_all(ctx, *, reason=None):
    role = discord.utils.get(ctx.guild.roles, id=MUTE_ROLE_ID)
    if not role:
        await ctx.send("–†–æ–ª—å –º—å—é—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ–ª—å, —á—Ç–æ ID —Ä–æ–ª–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        logging.warning(f"Mute role not found for guild {ctx.guild.id}")
        return

    members = ctx.channel.members

    tasks = []
    for member in members:
        if member != ctx.guild.me:
            tasks.append(member.add_roles(role))

    await asyncio.gather(*tasks)
    await asyncio.sleep(3600)

    tasks = []
    for member in members:
        if member != ctx.guild.me:
            tasks.append(member.remove_roles(role, reason="Mute time expires"))
            logging.info(f"Everyone is unmuted.")

    await asyncio.gather(*tasks)
    await ctx.send("–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –±—ã–ª–∏ —Ä–∞–∑–º—É—á–µ–Ω—ã.")

class ConfirmView(View):
    def __init__(self, ctx):
        super().__init__(timeout=15)
        self.ctx = ctx
        self.value = None

    @discord.ui.button(label="‚úÖ", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: Button):
        if interaction.user == self.ctx.author:
            self.value = True
            self.stop()
            await self.message.delete()

    @discord.ui.button(label="üö´", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: Button):
        if interaction.user == self.ctx.author:
            self.value = False
            self.stop()

@bot.command()
async def bomb(ctx):
    cooldown_end_time = get_bomb_cooldown(ctx.guild.id)
    if cooldown_end_time:
        cooldown_end_time = datetime.fromisoformat(cooldown_end_time)
        if cooldown_end_time > datetime.now():
            retry_after = (cooldown_end_time - datetime.now()).total_seconds()
            days = int(retry_after // 86400)
            remainder = retry_after % 86400
            hours = int(remainder // 3600)
            remainder %= 3600
            minutes = int(remainder // 60)

            time_parts = []
            if days > 0:
                time_parts.append(f"{days} –¥–Ω–µ–π")
            if hours > 0:
                time_parts.append(f"{hours} —á–∞—Å–æ–≤")
            if minutes > 0:
                time_parts.append(f"{minutes} –º–∏–Ω—É—Ç")

            time_str = " ".join(time_parts)

            await ctx.send(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {time_str}.")
            logging.warning(f"Command !bomb called on cooldown. Remaining cooldown: {time_str}")
            return

    view = ConfirmView(ctx)
    confirmation_message = await ctx.send(f"{ctx.author.mention}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", view=view)
    view.message = confirmation_message
    await view.wait()

    if view.value is False:
        await ctx.send("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        remove_bomb_cooldown(ctx.guild.id)
        await confirmation_message.delete()
        return
    elif view.value is None:
        await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        remove_bomb_cooldown(ctx.guild.id)
        await confirmation_message.delete()
        return

    number = random.randint(1000, 2000)
    number_str = str(number)
    masked_number = f"{number_str[0]}X{number_str[2]}X"

    bomb_info[ctx.guild.id] = {
        'number': number,
        'end_time': datetime.now() + timedelta(hours=1)
    }

    await ctx.send(f"**Bomb has been planted.**\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author.mention} –∑–∞–ª–æ–∂–∏–ª –±–æ–º–±—É –≤ —á–∞—Ç–µ!\n\n\n–î–ª—è —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `!defuse` –∏ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: `!defuse 1723`.\n**–ù–∞ —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—ë—Ç—Å—è 60 –º–∏–Ω—É—Ç!**\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {masked_number}.")
    logging.info(f"Bomb has been planted by {ctx.author}.\nMask: {masked_number}.\nPassword is: {number}")

    set_bomb_cooldown(ctx.guild.id, datetime.now() + timedelta(days=7))

    await asyncio.sleep(3600)

    if ctx.guild.id in bomb_info and bomb_info[ctx.guild.id]['end_time'] <= datetime.now():
        await ctx.send("Terrorist win! –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –±—ã–ª–∏ –∑–∞–º—å—é—á–µ–Ω—ã –Ω–∞ 1 —á–∞—Å.")
        await mute_all(ctx, reason="Bomb exploded")
        logging.info(f"Time on !bomb command action expires. Everyone is muted for 1 hour.")

@bot.command()
async def defuse(ctx, guess: int):
    if ctx.guild.id in bomb_info:
        number = bomb_info[ctx.guild.id]['number']
        if guess == number:
            await ctx.send(f"Bomb has been defused! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ctx.author.mention} —É–≥–∞–¥–∞–ª –∫–æ–¥ –∏ —Å–ø–∞—Å —á–∞—Ç!")
            logging.info(f"Bomb has been defused by {ctx.author}.\nGenerated number: {number}")
            del bomb_info[ctx.guild.id]
        else:
            await ctx.send("–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
    else:
        await ctx.send("No bomb has been planted.")

@bot.command()
@commands.has_permissions(manage_messages=True)
async def warn(ctx, member: discord.Member, *, reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    warnings_list = get_warnings(member.id)
    warnings_list = [w for w in warnings_list if datetime.fromisoformat(w['timestamp']) > datetime.now() - timedelta(days=1)]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    add_warning(member.id, reason)
    warnings_list.append({'timestamp': datetime.now().isoformat(), 'reason': reason})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    recent_warnings = [w for w in warnings_list if datetime.fromisoformat(w['timestamp']) > datetime.now() - timedelta(days=1)]
    if len(recent_warnings) >= 3:
        await mute(ctx, member, '24h', reason="3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞")
        remove_warnings(member.id)
    else:
        await ctx.send(f'{member.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω–∞: {reason}.')
        logging.info(f"Warned {member.id}. Reason: {reason}")

@bot.command()
@commands.has_permissions(manage_messages=True)
async def warnremove(ctx, member: discord.Member):
    if get_warnings(member.id):
        remove_warnings(member.id)
        await ctx.send(f'–í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {member.mention} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.')
        logging.info(f"Removed all warnings for {member.id}")
    else:
        await ctx.send(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.')
        logging.warning(f"No active warnings for {member.id}")

@bot.command()
@commands.has_permissions(manage_messages=True)
async def warnings(ctx, member: discord.Member):
    warnings_list = get_warnings(member.id)
    if warnings_list:
        warn_messages = [f"{datetime.fromisoformat(w['timestamp']).strftime('%d-%m-%Y %H-%M')}: {w['reason']}" for w in warnings_list]
        warn_messages.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
        await ctx.send(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {member.mention}:\n" + "\n".join(warn_messages))
        logging.info(f"Listed warnings for {member.id}")
    else:
        await ctx.send(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.')
        logging.warning(f"No warnings for {member.id}")

@warnremove.error
async def warnremove_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!warnremove @username`")
        logging.error(f"Missing required argument for warnremove command: {error}")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–ø–æ–º—è–Ω—É—Ç –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        logging.error(f"Bad argument for warnremove command: {error}")
    else:
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logging.error(f"Error in warnremove command: {error}")

@warn.error
async def warn_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!warn @username –ø—Ä–∏—á–∏–Ω–∞`")
        logging.error(f"Missing required argument for warn command: {error}")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Ä–Ω–æ –æ—Ç–º–µ—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        logging.error(f"Bad argument for warn command: {error}")
    else:
        await ctx.send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logging.error(f"Error in warn command: {error}")

@mute.error
async def mute_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!mute @username –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–∞`")
        logging.error(f"Missing required argument for mute command: {error}")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–µ—Ä–Ω–æ –æ—Ç–º–µ—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –º—å—é—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö.")
        logging.error(f"Bad argument for mute command: {error}")
    else:
        await ctx.send("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º—å—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logging.error(f"Error in mute command: {error}")

@unmute.error
async def unmute_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!unmute @username`")
        logging.error(f"Missing required argument for unmute command: {error}")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–ø–æ–º—è–Ω—É—Ç –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        logging.error(f"Bad argument for unmute command: {error}")
    else:
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞–Ω–º—å—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logging.error(f"Error in unmute command: {error}")

@warnings.error
async def warnings_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!warnings @username`")
        logging.error(f"Missing required argument for warnings command: {error}")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–ø–æ–º—è–Ω—É—Ç –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        logging.error(f"Bad argument for warnings command: {error}")
    else:
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logging.error(f"Error in warnings command: {error}")

# Mute timings parsing

def parse_duration(duration: str) -> int:
    if duration.endswith('d'):
        return int(duration[:-1]) * 86400
    elif duration.endswith('h'):
        return int(duration[:-1]) * 3600
    elif duration.endswith('m'):
        return int(duration[:-1]) * 60
    elif duration.endswith('s'):
        return int(duration[:-1])
    else:
        return None

# YouTube API setup

def get_youtube_service(api_key):
    return googleapiclient.discovery.build('youtube', 'v3', developerKey=api_key)

@bot.command()
@commands.has_permissions(manage_messages=True)
async def getvideosid(ctx):
    channel_ids = [YOUTUBE_CHANNEL_ID_1, YOUTUBE_CHANNEL_ID_2]
    for channel_id in channel_ids:
        last_video_id = get_last_video_id(channel_id)
        if last_video_id:
            logging.info(f"Last video ID for channel {channel_id}: {last_video_id}")
        else:
            logging.info(f"No video ID found for channel {channel_id}")
    await ctx.send("Video IDs have been logged.")

async def check_youtube_channels_manual(ctx):
    channel = bot.get_channel(NOTIFICATION_CHANNEL_ID)
    if not channel:
        await ctx.send("Notification channel not found.")
        logging.error("Notification channel not found")
        return

    for api_key in YOUTUBE_API_KEYS:
        youtube = get_youtube_service(api_key)
        try:
            # Check first YouTube channel
            request = youtube.search().list(
                part="snippet",
                channelId=YOUTUBE_CHANNEL_ID_1,
                order="date",
                maxResults=1
            )
            response = request.execute()
            if 'items' in response and len(response['items']) > 0:
                video_id = response['items'][0]['id']['videoId']
                last_video_id = get_last_video_id(YOUTUBE_CHANNEL_ID_1)
                if video_id != last_video_id:
                    video_title = response['items'][0]['snippet']['title']
                    video_url = f"https://www.youtube.com/watch?v={video_id}"
                    await channel.send(f"<@&1104385788797534228>\n–ù–∞ –∫–∞–Ω–∞–ª–µ –∫–∞–∫–∞—è-—Ç–æ –¥–≤–∏–∂—É—Ö–∞. –ê –Ω—É-–∫–∞ –≥–ª—è–Ω–µ–º: {video_url}")
                    set_last_video_id(YOUTUBE_CHANNEL_ID_1, video_id)
                    logging.info(f"New video detected on channel {YOUTUBE_CHANNEL_ID_1}: {video_url}")

            # Check second YouTube channel
            request = youtube.search().list(
                part="snippet",
                channelId=YOUTUBE_CHANNEL_ID_2,
                order="date",
                maxResults=1
            )
            response = request.execute()
            if 'items' in response and len(response['items']) > 0:
                video_id = response['items'][0]['id']['videoId']
                last_video_id = get_last_video_id(YOUTUBE_CHANNEL_ID_2)
                if video_id != last_video_id:
                    video_title = response['items'][0]['snippet']['title']
                    video_url = f"https://www.youtube.com/watch?v={video_id}"
                    await channel.send(f"<@&1265571159601319989>\n–ù–∞ –≤—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–µ —á—Ç–æ-—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å. –î–∞–≤–∞–π—Ç–µ-–∫–∞ –∑–∞—Ü–µ–Ω–∏–º: {video_url}")
                    set_last_video_id(YOUTUBE_CHANNEL_ID_2, video_id)
                    logging.info(f"New video detected on channel {YOUTUBE_CHANNEL_ID_2}: {video_url}")
            await ctx.send("YouTube channels checked successfully.")
            logging.info("YouTube channels checked successfully")
            break  # Exit the loop if the request was successful
        except googleapiclient.errors.HttpError as e:
            if e.resp.status == 403 and 'quotaExceeded' in str(e):
                await ctx.send(f"Quota exceeded for API key: {api_key}. Trying next key...")
                logging.warning(f"Quota exceeded for API key: {api_key}")
            else:
                await ctx.send(f"An error occurred: {e}")
                logging.error(f"An error occurred: {e}")
                raise e


@bot.command()
@commands.has_permissions(manage_messages=True)
async def check_youtube_channels(ctx):
    await check_youtube_channels_manual(ctx)

@tasks.loop(minutes=1)
async def check_mutes():
    current_time = datetime.now()
    mutes = get_mutes()
    for user_id, mute_info in list(mutes.items()):
        if current_time >= datetime.fromisoformat(mute_info['end_time']):
            guild = bot.get_guild(YOUR_ADMIN_ROLE_ID)
            member = guild.get_member(user_id)
            if member:
                role = discord.utils.get(guild.roles, id=MUTE_ROLE_ID)
                if role in member.roles:
                    await member.remove_roles(role, reason="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—å—é—Ç–∞ –≤—ã—à–ª–∞.")
                    remove_mute(user_id)
                    logging.info(f"Unmuted {user_id} as mute duration expired")

bot.run(DISCORD_TOKEN)
